#+TITLE: NEOVIM CONFIG
#+PROPERTY:

* Table of contents :toc:
- [[#config-init][Config init]]
  - [[#bootstrapping-packernvim][Bootstrapping Packer.nvim]]
  - [[#require-settings][Require settings]]
  - [[#require-plugins][Require plugins]]
  - [[#require-keymaps][Require keymaps]]
  - [[#require-configs][Require configs]]
- [[#bootstrap][Bootstrap]]
- [[#utils][Utils]]
- [[#settings][Settings]]
  - [[#declarations][Declarations]]
  - [[#security][Security]]
  - [[#visual-perks][Visual perks]]
  - [[#searching][Searching]]
  - [[#wildmenu-settings][Wildmenu settings]]
  - [[#wrapping][Wrapping]]
  - [[#miscellaneous][Miscellaneous]]
  - [[#backups][Backups]]
  - [[#tab][Tab]]
  - [[#indent][Indent]]
  - [[#completion][Completion]]
  - [[#python][Python]]
  - [[#others][Others]]
- [[#mappings][Mappings]]
  - [[#reload-config][Reload config]]
  - [[#break-undo-sequences][break undo sequences]]
  - [[#commenting][Commenting]]
  - [[#file-explorer][File Explorer]]
  - [[#vertical-resize][Vertical resize]]
  - [[#maximizer-toggle][Maximizer toggle]]
  - [[#switch-windows][Switch windows]]
  - [[#swap-line-updown][Swap line up/down]]
  - [[#better-yanking][Better yanking]]
  - [[#better-pasting][Better pasting]]
  - [[#select-everything][Select everything]]
  - [[#run-cpp-script][Run cpp script]]
  - [[#telescope-mappings][Telescope mappings]]
  - [[#lazygit][Lazygit]]
- [[#plugins][Plugins]]
- [[#plugin-conifgs][Plugin conifgs]]
  - [[#init][Init]]
  - [[#telescope][Telescope]]
  - [[#lsp][Lsp]]
  - [[#term][Term]]
  - [[#file-explorer-1][File explorer]]
- [[#vimscirpt-config][Vimscirpt config]]
  - [[#augroups][Augroups]]

* Config init
** Bootstrapping Packer.nvim
#+begin_src lua :tangle init.lua
require("bootstrap")
#+end_src

** Require settings
#+begin_src lua :tangle init.lua
require("settings")
#+end_src

** Require plugins
#+begin_src lua :tangle init.lua
require("plugins")
#+end_src

** Require keymaps
#+begin_src lua :tangle init.lua
require("mappings")
#+end_src

** Require configs
#+begin_src lua :tangle init.lua
require("config.telescope")
require("config.lsp")
require("config.term")
require("config.file-explorer")
#+end_src

* Bootstrap
Bootstrapping neovim package manager (packer.nvim)
#+begin_src lua :tangle lua/bootstrap.lua
local execute = vim.api.nvim_command
local fn = vim.fn

local install_path = fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"

if fn.empty(fn.glob(install_path)) > 0 then
    fn.system({"git", "clone", "https://github.com/wbthomason/packer.nvim", install_path})
    execute "packadd packer.nvim"
end
#+end_src

* Utils
#+begin_src lua :tangle lua/utils/init.lua
local utils = {}

local scopes = {o = vim.o, b = vim.bo, w = vim.wo}

function utils.opt(scope, key, value)
    scopes[scope][key] = value
    if scope ~= "o" then
        scopes["o"][key] = value
    end
end

function utils.map(mode, lhs, rhs, opts)
    local options = {}
    if opts then
        options = vim.tbl_extend("force", options, opts)
    end
    vim.api.nvim_set_keymap(mode, lhs, rhs, options)
end

return utils
#+end_src

* Settings
General settings for neovim
** Declarations
#+begin_src lua :tangle lua/settings.lua
local utils = require("utils")

local cmd = vim.cmd
local indent = 4
local undodir = "/home/chachi/.local/share/nvim/undo"

cmd "syntax enable"
cmd "filetype plugin indent on"
#+end_src

** Security
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "exrc", true)
utils.opt("o", "secure", true)
-- utils.opt("o", "shell", "/usr/bin/zsh")
#+end_src

** Visual perks
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "guicursor", "")
utils.opt("w", "number", true)
utils.opt("w", "relativenumber", true)
utils.opt("b", "modeline", false)
utils.opt("w", "signcolumn", "auto")
utils.opt("o", "showmode", false)
-- utils.opt("o", "termguicolors", true)
#+end_src

** Searching
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "hlsearch", false)
utils.opt("o", "ignorecase", true)
utils.opt("o", "smartcase", true)
utils.opt("o", "incsearch", true)
#+end_src

** Wildmenu settings
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "wildmenu", true)
utils.opt("o", "wildignorecase", true)
utils.opt("o", "pumblend", 30)
vim.o.wildignore = vim.o.wildignore .. "*.o,*.obj,*.~,*.class,"
vim.o.wildignore = vim.o.wildignore .. "*.git,"
vim.o.wildignore = vim.o.wildignore .. "*.swp,*.tmp,"
vim.o.wildignore = vim.o.wildignore .. "*.mp3,*.mp4,"
vim.o.wildignore = vim.o.wildignore .. "*.bmp,*.gif,*ico,*.jpg,*.png,"
vim.o.wildignore = vim.o.wildignore .. "*.pdf,*.doc,*.docs,*.ppt,*.pptx,"
vim.o.wildignore = vim.o.wildignore .. "*.rar,*.zip,*.tar,*.tar.gz,*.tar.xz,"
#+end_src

** Wrapping
#+begin_src lua :tangle lua/settings.lua
utils.opt("w", "wrap", false)
#+end_src

** Miscellaneous
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "errorbells", false)
utils.opt("o", "hidden", true)
utils.opt("o", "joinspaces", false)
vim.o.shortmess = vim.o.shortmess .. "c"
utils.opt("o", "scrolloff", 10)
utils.opt("o", "updatetime", 50)
#+end_src

** Backups
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "backup", false)
utils.opt("b", "swapfile", false)
utils.opt("b", "undofile", true)
utils.opt("o", "undodir", undodir)
if not vim.fn.isdirectory(undodir) then
    os.execute("mkdir -p " .. undodir)
end
#+end_src

** Tab
#+begin_src lua :tangle lua/settings.lua
utils.opt("b", "tabstop", indent)
utils.opt("b", "softtabstop", indent)
utils.opt("b", "shiftwidth", indent)
utils.opt("o", "smarttab", true)
utils.opt("o", "shiftround", true)
utils.opt("b", "expandtab", true)
#+end_src

** Indent
#+begin_src lua :tangle lua/settings.lua
utils.opt("b", "cindent", true)
utils.opt("b", "smartindent", true)
utils.opt("b", "autoindent", true)
utils.opt("b", "indentexpr", "")
#+end_src

** Completion
#+begin_src lua :tangle lua/settings.lua
utils.opt("o", "completeopt", "menuone,noinsert,noselect")
#+end_src

** Python
#+begin_src lua :tangle lua/settings.lua
vim.cmd "let g:python3_host_prog = '/usr/bin/python'"
#+end_src

** Others
#+begin_src lua :tangle lua/settings.lua
-- ¯\_(ツ)_/¯
-- vim.g.t_8f = "<Esc>[38;2;%lu;%lu;%lum]"
-- vim.api.nvim_set_var("&t_8f", "<Esc>[38;2;%lu;%lu;%lum")
-- vim.api.nvim_set_var("&t_8f", "<Esc>[48;2;%lu;%lu;%lum")
#+end_src

* Mappings
#+begin_src lua :tangle lua/mappings.lua
local map = vim.api.nvim_set_keymap
local opts = {noremap = true, silent = true}
vim.g.mapleader = " "
#+end_src

** Reload config
#+begin_src lua :tangle lua/mappings.lua
map("n", "<leader><CR>", '<cmd>Reload<CR><cmd>PackerCompile<CR><cmd>echo "Reload config"<CR>', opts)
-- map("n", "<leader><CR>", '<cmd>so ~/.config/nvim/init.lua<CR><cmd>echo "Sourced config"<CR>', opts)
-- nnoremap <silent> <leader><CR> :so ~/.config/nvim/init.vim<CR>:echo "init.vim has been sourced successfully"<CR>
#+end_src

#+begin_src lua :tangle lua/mappings.lua
map("n", "J", "mzJ`z", opts)
#+end_src

** break undo sequences
#+begin_src lua :tangle lua/mappings.lua
map("i", "<space>", "<space><c-g>u", opts)
map("i", ",", ",<c-g>u", opts)
map("i", ".", ".<c-g>u", opts)
map("i", "!", "!<c-g>u", opts)
map("i", "?", "?<c-g>u", opts)
#+end_src

** Commenting
#+begin_src lua :tangle lua/mappings.lua
map("n", "<leader>c", "<cmd>CommentToggle<CR>", opts) map("n", "<C-_>", "<cmd>CommentToggle<CR>", opts)
map("v", "<leader>c", ":CommentToggle<CR>", opts)
map("v", "<C-_>", ":CommentToggle<CR>", opts)
map("i", "<C-_>", "<cmd>CommentToggle<CR>", opts)
#+end_src

** File Explorer
#+begin_src lua :tangle lua/mappings.lua
map("n", "<C-n>", "<cmd>NvimTreeToggle<CR>", opts)
map("n", "<leader>r", "<cmd>NvimTreeRefresh<CR>", opts)
-- map("n","<C-n>", "<cmd>NvimTreeToggle<CR>", opts)
-- nnoremap <C-n> :NvimTreeToggle<CR>
-- nnoremap <leader>r :NvimTreeRefresh<CR>
-- nnoremap <leader>n :NvimTreeFindFile<CR>
#+end_src

** Vertical resize
#+begin_src lua :tangle lua/mappings.lua
-- map("n", "<leader>+", "<cmd>vertical resize +5<CR>", opts)
-- map("n", "<leader>-", "<cmd>vertical resize -5<CR>", opts)
#+end_src

** Maximizer toggle
#+begin_src lua :tangle lua/mappings.lua
map("n", "<leader>m", "<cmd>MaximizerToggle<CR>", opts)
#+end_src

** Switch windows
#+begin_src lua :tangle lua/mappings.lua
map("n", "<C-j>", "<C-w><C-j>", opts)
map("n", "<C-k>", "<C-w><C-k>", opts)
map("n", "<C-h>", "<C-w><C-h>", opts)
map("n", "<C-l>", "<C-w><C-l>", opts)
map("t", "<C-j>", "<C-\\><C-n><C-w><C-j>", opts)
map("t", "<C-k>", "<C-\\><C-n><C-w><C-k>", opts)
map("t", "<C-h>", "<C-\\><C-n><C-w><C-h>", opts)
map("t", "<C-l>", "<C-\\><C-n><C-w><C-l>", opts)
#+end_src

** Swap line up/down
#+begin_src lua :tangle lua/mappings.lua
map("n", "<A-j>", "<cmd>m .+1<CR>==", opts)
map("n", "<A-k>", "<cmd>m .-2<CR>==", opts)
map("i", "<A-j>", "<Esc><cmd>m .+1<CR>==gi", opts)
map("i", "<A-k>", "<Esc><cmd>m .-2<CR>==gi", opts)
map("v", "<A-j>", ":m '>+1<CR>gv=gv", opts)
map("v", "<A-k>", ":m '<-2<CR>gv=gv", opts)
#+end_src

** Better yanking
#+begin_src lua :tangle lua/mappings.lua
map("n", "Y", "y$", opts)
map("v", "<leader>y", '"+y', opts)
map("n", "<leader>Y", '"+yg_', opts)
map("n", "<leader>y", '"+y', opts)
#+end_src

** Better pasting
#+begin_src lua :tangle lua/mappings.lua
map("n", "<leader>p", '"+p', opts)
map("n", "<leader>P", '"+P', opts)
map("v", "<leader>p", '"+p', opts)
map("v", "<leader>P", '"+P', opts) -- "
#+end_src

** Select everything
#+begin_src lua :tangle lua/mappings.lua
map("n", "<C-a>", "ggVG", opts)
#+end_src

** Run cpp script
#+begin_src lua :tangle lua/mappings.lua
if vim.bo.filetype == "cpp" then
    map("n", "<F5>", "<cmd>Run<CR>", opts)
end
#+end_src

** Telescope mappings
#+begin_src lua :tangle lua/mappings.lua
map("n", "<C-p>", '<cmd>lua require("config.telescope").project_files()<CR>', opts)
map("n", "<leader>fa", '<cmd>lua require("telescope.builtin").live_grep()<CR>', opts)
map("n", "<leader>fb", '<cmd>lua require("telescope.builtin").buffers()<CR>', opts)
map("n", "<leader>fd", '<cmd>lua require("telescope.builtin").lsp_definitions()<CR>', opts)
map("n", "<leader>vrc", '<cmd>lua require("config.telescope").search_dotfiles()<CR>', opts)
-- nnoremap <silent> <C-p> :lua require('my-telescope').project_files()<CR>
-- nnoremap <silent> <leader>ff :lua require('my-telescope').project_files()<CR>
-- nnoremap <silent> <leader>fa :lua require('telescope.builtin').live_grep()<CR>
-- nnoremap <silent> <leader>fb :lua require('telescope.builtin').file_browser()<CR>
-- nnoremap <silent> <leader>fd :lua require('telescope.builtin').lsp_definitions{}<CR>
-- nnoremap <silent> <leader>fg :lua require('telescope.builtin').git_files()<CR>
-- nnoremap <silent> <leader>fb :lua require('telescope.builtin').buffers()<cr>
-- nnoremap <silent> <leader>vrc :lua require('my-telescope').search_dotfiles()<CR>
#+end_src

** Lazygit
#+begin_src lua :tangle lua/mappings.lua
map("n", "<leader>gg", '<cmd>lua require("config.term").lazygit()<CR>', opts)
map("n", "<leader>gb", "<cmd>G blame --date=relative<CR>", opts)
#+end_src

* Plugins
#+begin_src lua :tangle lua/plugins.lua
require("packer").startup(
  function(use)
    -- Packer can manage itself
    use "wbthomason/packer.nvim"

    -- Telescope plugins
    use {
      "nvim-telescope/telescope.nvim",
      requires = {{"nvim-lua/popup.nvim"}, {"nvim-lua/plenary.nvim"}}
    }
    use "nvim-telescope/telescope-fzy-native.nvim"
    use "kyazdani42/nvim-web-devicons"

    -- Lsp plugins
    use "neovim/nvim-lspconfig"
    use "nvim-lua/lsp_extensions.nvim"
    use {
      "kabouzeid/nvim-lspinstall",
      config = function()
        require "lspinstall".setup()

        local servers = require "lspinstall".installed_servers()

        for _, server in pairs(servers) do
          require "lspconfig"[server].setup {}
        end
      end
    }

    -- Completion plugins
    use {
      "hrsh7th/nvim-compe",
      config = function()
        require "compe".setup(
          {
            enabled = true,
            source = {
              path = true,
              buffer = true,
              tag = true,
              nvim_lsp = true,
              nvim_lua = true,
              vsnip = true
            }
          }
        )
      end
   }

    -- Snippets
    use "rafamadriz/friendly-snippets"
    use "hrsh7th/vim-vsnip"
    use "hrsh7th/vim-vsnip-integ"

    -- Treesitter plugin
    use {
      "nvim-treesitter/nvim-treesitter",
      config = function()
        require "nvim-treesitter.configs".setup {
          highlight = {
            enable = true,
            use_languagetree = true -- Use this to enable language injection
            -- custom_captures = {
            --     -- Highlight the @foo.bar capture group with the "Identifier" highlight group.
            --     ["foo.bar"] = "Identifier",
            -- },
          },
          indent = {
            enable = true
          }
        }
      end
    }

    -- Debug plugins
    -- use "puremourning/vimspector"
    use "szw/vim-maximizer"

    -- Git plugins
    use {
      "lewis6991/gitsigns.nvim",
      config = function()
        require "gitsigns".setup {
          signs = {
            add = {
              hl = "GitSignsAdd",
              text = "+",
              numhl = "GitSignsAddNr",
              linehl = "GitSignsAddLn"
            },
            change = {
              hl = "GitSignsChange",
              text = "│",
              numhl = "GitSignsChangeNr",
              linehl = "GitSignsChangeLn"
            },
            delete = {
              hl = "GitSignsDelete",
              text = "-",
              numhl = "GitSignsDeleteNr",

              linehl = "GitSignsDeleteLn"
            },
            topdelete = {
              hl = "GitSignsDelete",
              text = "‾",
              numhl = "GitSignsDeleteNr",
              linehl = "GitSignsDeleteLn"
            },
            changedelete = {
              hl = "GitSignsChange",
              text = "~",
              numhl = "GitSignsChangeNr",
              linehl = "GitSignsChangeLn"
            }
          }
        }
      end
    }
    -- use "tpope/vim-fugitive"

    -- Statusline
    use {
      "hoob3rt/lualine.nvim",
      config = function()
        require "lualine".setup {
          options = {
            theme = "onedark",
            disabled_filetypes = {"NvimTree"},
            section_serparators = "",
            component_separators = ""
          },
          sections = {
            lualine_a = {"mode"},
            lualine_b = {"branch"},
            lualine_c = {"filename"},
            lualine_x = {"filetype"},
            lualine_y = {"progress"},
            lualine_z = {"location"}
          },
          inactive_sections = {
            lualine_a = {},
            lualine_b = {},
            lualine_c = {"filename"},
            lualine_x = {"location"},
            lualine_y = {},
            lualine_z = {}
          },
          extentions = {
            "nvim-tree",
            "fzf"
          }
        }
      end
    }

    -- Terminal plugin
    use {
      "akinsho/nvim-toggleterm.lua",
      config = function()
        require "toggleterm".setup {
          open_mapping = "<A-i>",
          hide_numbers = true,
          shade_terminal = true,
          shading_factor = "3",
          start_in_insert = true,
          insert_mappings = true,
          persist_size = true,
          shell = vim.o.shell,
          direction = "float",
          float_opts = {
            border = "single",
            winblend = 3
          }
        }
      end
    }

    -- File Explorer plugin
    use {
      "kyazdani42/nvim-tree.lua",
      requires = 'kyazdani42/nvim-web-devicons',
      config = function() require'nvim-tree'.setup {
        disable_netrw       = true,
        hijack_netrw        = true,
        open_on_setup       = false,
        ignore_ft_on_setup  = {},
        auto_close          = false,
        open_on_tab         = false,
        hijack_cursor       = false,
        update_cwd          = false,
        update_to_buf_dir   = {
            enable = true,
            auto_open = true,
        },
        diagnostics = {
            enable = false,
            icons = {
            hint = "",
            info = "",
            warning = "",
            error = "",
            }
        },
        update_focused_file = {
            enable      = false,
            update_cwd  = false,
            ignore_list = {}
        },
        system_open = {
            cmd  = nil,
            args = {}
        },
        filters = {
            dotfiles = false,
            custom = {}
        },
        view = {
            width = 30,
            height = 30,
            hide_root_folder = false,
            side = 'left',
            auto_resize = false,
            mappings = {
            custom_only = false,
            list = {}
            }
        }
      } end
    }

    -- Laravel plugin
    -- use {"jwalton512/vim-blade", ft = {"laravel"}}

    -- Surround plugin
    use {
      "blackCauldron7/surround.nvim",
      config = function()
        vim.g.surround_mappings_style = "surround"
        require "surround".setup {}
      end
    }

    -- Html plugins
    use "alvan/vim-closetag"
    use "AndrewRadev/tagalong.vim"

    -- Autopair plugin
    use {
      "steelsojka/pears.nvim",
      config = function()
        require "pears".setup()
      end
    }

    -- Autotag plugin
    use {
      "windwp/nvim-ts-autotag",
      config = function()
        require "nvim-ts-autotag".setup()
      end
    }

    -- Comments plugin
    use {
      "terrortylor/nvim-comment",
      config = function()
        require "nvim_comment".setup(
          {
            marker_padding = true,
            create_mappings = false,
            comment_empty = false
          }
        )
      end
    }
    use {
      "JoosepAlviste/nvim-ts-context-commentstring",
      config = function()
        require "nvim-treesitter.configs".setup {
          context_commentstring = {
            enable = true
            -- enable_autocmd = false
          }
        }
      end
    }
    -- use "glepnir/prodoc.nvim"

    -- Colorschemes
    -- use "gruvbox-community/gruvbox"
    -- use "drewtempelmeyer/palenight.vim"
    use {
      "navarasu/onedark.nvim",
      config = function()
        vim.g.onedark_style = "warmer"
        require "onedark".setup()
        vim.cmd "hi Normal guibg=NONE ctermbg=NONE"
        vim.cmd "hi EndOfBuffer guibg=NONE ctermbg=NONE"
        vim.cmd "hi SignColumn guibg=NONE ctermbg=NONE"
        vim.cmd "hi NvimTreeNormal guibg=NONE ctermbg=NONE"
        vim.cmd "hi NvimTreeEndOfBuffer guibg=NONE ctermbg=NONE"
      end
    }

    -- Markdown Previewer
    use {"iamcco/markdown-preview.nvim", ft = "markdown"}

    -- Formatter
    -- use "sbdchd/neoformat"
    use {
      "mhartington/formatter.nvim",
      config = function()
        require "formatter".setup(
          {
            logging = false,
            filetype = {
              javascript = {
                -- prettier
                function()
                  return {
                    exe = "prettier",
                    args = {"--stdin-filepath", vim.api.nvim_buf_get_name(0), "--single-quote"},
                    stdin = true
                  }
                end
              },
              javascriptreact = {
                -- prettier
                function()
                  return {
                    exe = "prettier",
                    args = {"--stdin-filepath", vim.api.nvim_buf_get_name(0), "--single-quote"},
                    stdin = true
                  }
                end
              },
              vue = {
                -- prettier
                function()
                  return {
                    exe = "prettier",
                    args = {"--stdin-filepath", vim.api.nvim_buf_get_name(0), "--double-quote"},
                    stdin = true
                  }
                end
              },
              lua = {
                -- luafmt
                function()
                  return {
                    exe = "luafmt",
                    args = {"--indent-count", 2, "--stdin"},
                    stdin = true
                  }
                end
              },
              python = {
                function()
                  return {
                    exe = "python -m black",
                    stdin = false
                  }
                end
              },
              cpp = {
                function()
                  return {
                    exe = "clang-format",
                    args = {"--assume-filename", vim.api.nvim_buf_get_name(0)},
                    stdin = true,
                    cwd = vim.fn.expand("%:p:h")
                  }
                end
              }
            }
          }
        )
        vim.api.nvim_exec(
          [[
                    augroup Format
                        autocmd!
                        autocmd BufWritePost *.js,*.py,*.lua,*.cpp FormatWrite
                    augroup END
                ]],
          true
        )
      end
    }

    -- Smooth scroll plugin
    use {
      "karb94/neoscroll.nvim",
      config = function()
        require "neoscroll".setup(
          {
            hide_cursor = true,
            stop_eof = true,
            respect_scrolloff = false,
            cursor_scrolls_alone = true,
            easing = true
          }
        )
      end
    }

    -- Reload plugin
    use "famiu/nvim-reload"

    -- Misc
    -- use {
    --   "lukas-reineke/indent-blankline.nvim",
    --   config = function()
    --     vim.cmd "highlight IndentBlanklineChar guifg=#4d4d4d gui=nocombine"
    --     vim.cmd "highlight IndentBlanklineSpaceChar guifg=#4d4d4d gui=nocombine"
    --     vim.cmd "highlight IndentBlanklineContextChar guifg=#737373 gui=nocombine"
    --     vim.cmd "let g:indent_blankline_use_treesitter = v:true"
    --     vim.cmd "let g:indent_blankline_show_current_context = v:true"
    --     vim.cmd "let g:indent_blankline_buftype_exclude = ['terminal', 'nofile']"
    --     vim.cmd "let g:indent_blankline_filetype_exclude = ['help']"
    --     vim.cmd "let g:indent_blankline_char = '▏'"
    --     vim.cmd "let g:indent_blankline_space_char = ' '"
    --   end
    -- }
  end
)
#+end_src

* Plugin conifgs
** Init
#+begin_src lua :tangle lua/config/init.lua
require("telescope")
require("file-explorer")
require("lsp")
require("term")
#+end_src
** Telescope
#+begin_src lua :tangle lua/config/telescope.lua
local actions = require("telescope.actions")

require("telescope").setup {
    defaults = {
        vimgrep_arguments = {
            "rg",
            "--follow"
        },
        prompt_prefix = "> ",
        selection_caret = "> ",
        entry_prefix = "  ",
        file_sorter = require("telescope.sorters").get_fzy_sorter,
        file_ignore_patterns = {"node_modules/*", "vendor/*", "storage/*", "/*.png", "venv/*", "/*.pyc"},
        color_devicons = true,
        use_less = true,
        file_previewer = require("telescope.previewers").vim_buffer_cat.new,
        grep_previewer = require("telescope.previewers").vim_buffer_vimgrep.new,
        qflist_previewer = require("telescope.previewers").vim_buffer_qflist.new,
        mappings = {
            i = {
                ["<C-x>"] = false,
                ["<C-q>"] = actions.send_to_qflist,
                ["<C-j>"] = actions.move_selection_next,
                ["<C-k>"] = actions.move_selection_previous
                -- ["<CR>"] = actions.select_tab
            }
        },
        layout_strategy = "flex",
        layout_config = {
            horizontal = {
                preview_width = 90,
                mirror = false
            }
        }
    },
    extensions = {
        fzy_native = {
            override_generic_sorter = false,
            override_file_sorter = true
        }
    }
}

require("telescope").load_extension("fzy_native")

local M = {}

M.project_files = function()
    local opts = {follow = true} -- define here if you want to define something
    local ok = pcall(require "telescope.builtin".git_files, opts)
    if not ok then
        require "telescope.builtin".find_files(opts)
    end
end

M.search_dotfiles = function()
    require("telescope.builtin").find_files(
        {
            prompt_title = "< VimRC >",
            cwd = "~/.config/nvim"
        }
    )
end

-- M.git_branches = function()
--     require("telescope.builtin").git_braches(
--         {
--             attach_mappings = function(_, map)
--                 map("i", "<C-d>", actions.git_delete_branch)
--                 map("n", "<C-d>", actions.git_delete_branch)
--                 return true
--             end
--         }
--     )
-- end

return M
#+end_src

** Lsp
#+begin_src lua :tangle lua/config/lsp.lua
-- use the same configuration you would use for `vim.lsp.diagnostic.on_publish_diagnostics`.
-- vim.lsp.handlers["textDocument/publishDiagnostics"] =
--     vim.lsp.with(
--     require("lsp_extensions.workspace.diagnostic").handler,
--     {
--         signs = {
--             severity_limit = "Error"
--         }
--     }
-- )

-- -- Get the counts from your curreent workspace:
-- local ws_errors = require("lsp_extensions.workspace.diagnostic").get_count(0, "Error")
-- local ws_hints = require("lsp_extensions.workspace.diagnostic").get_count(0, "Hint")

-- -- Set the qflist for the current workspace
-- --  For more information, see `:help vim.lsp.diagnostic.set_loc_list()`, since this has some of the same configuration.
-- if (ws_errors ~= 0 or ws_hints ~= 0) then
--     require("lsp_extensions.workspace.diagnostic").set_qf_list()
-- -- print("has err or hints")
-- end
#+end_src

** Term
#+begin_src lua :tangle lua/config/term.lua
local M = {}
local Terminal = require("toggleterm.terminal").Terminal

local lazygit =
    Terminal:new(
    {
        cmd = "lazygit",
        direction = "float"
    }
)

M.lazygit = function()
    lazygit:toggle()
end

local cpp =
    Terminal:new(
    {
        direction = "float",
        on_open = function(term)
            local file = vim.fn.expand("#")
            local run = vim.fn.expand("#:r")
            vim.fn.jobsend(term.job_id, "mkdir -p compiled\n")
            vim.fn.jobsend(term.job_id, "clear\n")
            vim.fn.jobsend(term.job_id, "g++ " .. file .. " -o compiled/" .. run .. "\n")
            vim.fn.jobsend(term.job_id, "./compiled/" .. run .. "\n")
        end,
        hiddent = true
    }
)

M.cpp = function()
    cpp:toggle()
end

return M

--local term = require("FTerm.terminal")
--   local zsh =
--       term:new():setup(
--       {
--           cmd = "zsh",
--           dimensions = {
--               height = 0.8,
--               width = 0.8,
--               x = 0.5,
--               y = 0.5
--           },
--           border = "single"
--       }
--   )
--
--   M.runCpp = function()
--       -- local file = vim.fn.expand("%")
--       -- local run = vim.fn.expand("%:r")
--       local file = vim.fn.expand("%")
--       local run = vim.fn.expand("%:r")
--       -- if not vim.fn.win_gotoid(vim.g.term_win) then
--       -- end
--       require "term".toggle()
--       local term_id = vim.b.terminal_job_id
--       vim.fn.jobsend(term_id, "mkdir -p compiled\n")
--       vim.fn.jobsend(term_id, "clear\n")
--       vim.fn.jobsend(term_id, "g++ " .. file .. " -o compiled/" .. run .. "\n")
--       vim.fn.jobsend(term_id, "./compiled/" .. run .. "\n")
--   end
--
--   M.toggle = function()
--       zsh:toggle()
--       vim.g.term_win = vim.fn.win_getid()
--   end
--
--   return M
#+end_src

** File explorer
#+begin_src lua :tangle lua/config/file-explorer.lua
vim.g.nvim_tree_gitignore = 1
vim.g.nvim_tree_quit_on_open = 1
vim.g.nvim_tree_indent_markers = 1
vim.g.nvim_tree_git_hl = 1
vim.g.nvim_tree_hieghlight_opened_files = 1
vim.g.nvim_tree_root_folder_modifier = ":~"
vim.g.nvim_tree_add_trailing = 1
vim.g.nvim_tree_group_empty = 1
vim.g.nvim_tree_disable_window_picker = 1
vim.g.nvim_tree_icon_padding = ' '
vim.g.nvim_tree_symlink_arrow = ' ➛ '
vim.g.nvim_tree_respect_buf_cwd = 1
vim.g.nvim_tree_create_int_closed_folder = 0
vim.g.nvim_tree_refresh_wait = 1000
vim.g.nvim_tree_window_picker_exclude = {
  filetype = {'notify', 'packer', 'qf'},
  buftype = {'terminal'}
}
vim.g.nvim_tree_special_files = { ["README.org"]=1, ["README.md"]=1, ["Makefile"]=1, ["MAKEFILE"]=1 }
vim.g.nvim_tree_show_icons = {["git"]=1}

-- default will show icon by default if no icon is provided
-- default shows no icon by default
vim.g.nvim_tree_icons = {
    default = "",
    symlink = "",
    git = {
        unstaged = "✗",
        staged = "✓",
        unmerged = "",
        renamed = "➜",
        untracked = "★",
        deleted = "",
        ignored = "◌"
    },
    folder = {
        default = "",
        open = "",
        empty = "",
        empty_open = "",
        symlink = "",
        symlink_open = ""
    },
    lsp = {
        hint = "",
        info = "",
        warning = "",
        error = ""
    }
}

-- NvimTreeOpen and NvimTreeClose are also available if you need them

-- a list of groups can be found at `:help nvim_tree_highlight`
-- highlight NvimTreeFolderIcon guibg=blue
#+end_src

* Vimscirpt config
** Augroups
*** Whitespace trimming
#+begin_src  :tangle plugin/augroups.vim
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun
augroup DeleteWhiteSpaces
    autocmd!
    autocmd BufWritePre * :call TrimWhitespace()
augroup END
#+end_src

*** Formatting
#+begin_src vimrc :tangle plugin/augroups.vim
" augroup fmt
"     autocmd!
"     autocmd BufWritePre * try | undojoin | silent Neoformat | catch /^Vim\%((\a\+)\)\=:E790/ | finally | silent Neoformat | endtry
" augroup END
#+end_src

*** Highlight yanks
#+begin_src vimrc :tangle plugin/augroups.vim
augroup highlight_yank
    autocmd!
    autocmd TextYankPost * silent! lua require('vim.highlight').on_yank({timeout = 100})
augroup END
#+end_src

*** Compile Packer on save
#+begin_src vimrc :tangle plugin/augroups.vim
augroup CompilePacker
    autocmd!
    autocmd BufWritePost plugins.lua source <afile> | PackerCompile
augroup END
#+end_src
